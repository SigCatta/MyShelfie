@startuml
abstract class it.polimi.ingsw.Controller.Client.MessageToServer {
- int gameId
- Game game
- String nickname
- SocketClientHandler socketClientHandler
+ {abstract}void update()
+ int getGameID()
+ void setGameId(int)
+ Game getGame()
+ void setGame(Game)
+ String getNickname()
+ void setNickname(String)
+ SocketClientHandler getSocketClientHandler()
+ void setSocketClientHandler(SocketClientHandler)
}
class it.polimi.ingsw.View.CLI.Elements.Views.BoardView {
- {static} BoardView instance
- boolean[][] lookUpTable
+ {static} BoardView getInstance()
+ ArrayList<String> getPrint(ArrayList<String>)
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.InsertTilesCE {
+ void execute()
- int getTileIndex()
- int getColumn()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.ScaleCGS {
+ boolean isGoalAchieved(Shelf)
+ boolean hasIncreasingColumns(ItemTile[][],boolean)
}
class it.polimi.ingsw.network.server.Server {
- {static} Server serverInstance
- Set<String> nicknameSet
+ {static} Logger LOGGER
+ {static} Server getInstance()
}
class it.polimi.ingsw.network.client.SocketClient {
- {static} Client clientInstance
- Socket socket
- ObjectOutputStream outputStm
- ObjectInputStream inputStm
- ExecutorService readExecutionQueue
- String nickname
- {static} int SOCKET_TIMEOUT
+ {static} Client getInstance()
+ {static} Client getInstance(String,int)
+ void readCommand()
+ void sendCommand(MessageToServer)
+ void disconnect()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.PickupTilesCE {
+ void execute()
- int getColumn()
- int getRow()
- boolean isInputValid(String)
- int stopPickup()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.ShelvesCE {
+ void execute()
}
class it.polimi.ingsw.model.tiles.ItemTile {
- Color COLOR
- int id
+ int getId()
+ Color getColor()
}
class it.polimi.ingsw.VirtualView.ModelObservers.BoardVV {
- Game GAME
- VirtualView VIRTUAL_VIEW
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.OtherShelvesController {
~ GridPane shelf
~ Text playerName
+ void setPlayerName(String)
+ String getPlayerName()
+ void initialize(URL,ResourceBundle)
- void initShelf()
+ void updateShelf()
+ void onPrevButtonClicked()
+ void onNextButtonClicked()
+ void onBackToBoardButtonClicked()
}
class it.polimi.ingsw.VirtualView.Messages.EchoMTC {
- boolean errorFlag
- EchoID id
+ void update()
+ boolean isError()
+ String getOutput()
+ EchoID getID()
}
class it.polimi.ingsw.View.GUI.SceneController.LobbyController {
- {static} boolean initialized
# void onPlayButtonClick()
# void onExitButtonClick()
+ void initialize(URL,ResourceBundle)
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.ColorsCE {
+ void execute()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.InvalidCE {
+ void execute()
}
class it.polimi.ingsw.VirtualView.Messages.ChatMTC {
- String CHAT_MESSAGE
- String SENDER
- String RECEIVER
- boolean isBroadcast
+ String getChatMessage()
+ String getSender()
+ String getRECEIVER()
+ boolean isBroadcast()
+ void update()
}
class it.polimi.ingsw.Controller.Server.Executor.PickupTilesExecutor {
+ {static} void execute(MessageToServer)
}
class it.polimi.ingsw.Controller.Server.Executor.ConnectionRestoredExecutor {
+ {static} void execute(Game,String)
}
class it.polimi.ingsw.VirtualView.Messages.PlayerMTC {
- String nickname
- boolean IS_CONNECTED
- int SCORE
- HashMap<Color,Point> PERSONAL_GOAL
- String PERSONAL_GOAL_CARD_NUMBER
+ String getNickname()
+ boolean isConnected()
+ int getScore()
+ HashMap<Color,Point> getPersonalGoal()
+ String getPERSONAL_GOAL_CARD_NUMBER()
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FiveTilesDiagonalCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.View.GUI.SceneController.BoardController {
- List<Integer> cardsSelectedFromBoard
- String myNickname
- int selectedTileToSendToShelf
~ GridPane board
~ FlowPane myChosenTilesTable
~ Circle newMessageIcon
~ AnchorPane chooseColumnPane
~ AnchorPane errorPane
~ ImageView errorImage
~ Text errorText
~ ImageView col0InsertButton
~ ImageView firstScoreToken
~ FlowPane playersPane
~ ImageView changeChat
+ void initialize(URL,ResourceBundle)
- void initInsertButtons()
- void initPlayersName()
- void initShelf()
- void initBoard()
+ void initChangeSceneButtons()
+ void updateBoard()
+ void updateShelf()
+ void updateChosenTilesTable()
+ void updateChat()
+ void updateEcho(EchoMTC)
+ void updateChangeTurn()
+ void updateGameState()
- void updateLastTurn()
- void showError(EchoMTC)
- void attachBoardListener(ImageView)
+ void onPickUpDoneClicked()
+ void setUpChosenTilesTable()
- void attachChosenTileListener(ImageView)
+ void onCol0InserterSelected()
+ void onCol1InserterSelected()
+ void onCol2InserterSelected()
+ void onCol3InserterSelected()
+ void onCol4InserterSelected()
+ void onInsertTileClicked(int)
+ void onObjectivesClicked()
+ void onShelvesClicked()
+ void onChatClicked()
}
interface it.polimi.ingsw.Controller.Server.Executor.Executor {
}
abstract class it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy {
~ CommonGoalReader reader
+ {abstract}boolean isGoalAchieved(Shelf)
+ String getCardName()
}
class it.polimi.ingsw.View.GUI.TilesSelectedCointainer {
~ {static} List<NodeData> tilesSelected
+ {static} void setTilesSelected(List<NodeData>)
+ {static} List<NodeData> getTilesSelected()
}
class it.polimi.ingsw.ClientApp {
+ {static} void main(String[])
- {static} void askForIP()
}
class it.polimi.ingsw.View.GUI.SceneController.WaitingRoomController {
~ Text playersNamesText
~ Text maxNumText
~ int maxNumberOfPlayers
~ Text currentNumText
~ TextField gameIdText
+ void updateGame()
+ void updateEcho(EchoMTC)
+ void updatePlayers()
- void enterGame()
- void addPlayerToString(String)
- void addPlayerToString(List<String>)
+ void initialize(URL,ResourceBundle)
}
enum it.polimi.ingsw.Enum.Color {
+  GREEN
+  YELLOW
+  BLUE
+  LIGHTBLUE
+  PINK
+  WHITE
}
class it.polimi.ingsw.View.CLI.InputStates.WaitingForPlayersState {
+ void play()
+ void update()
}
class it.polimi.ingsw.model.cards.personalGoals.PersonalGoal {
- HashMap<Color,Point> achievements
- Player player
- Stack<Integer> points
- String cardNumber
+ int calculateScore()
- int getPoints()
+ HashMap<Color,Point> getAchievements()
+ Stack<Integer> getPointStack()
+ String getCardNumber()
}
class it.polimi.ingsw.JSONReader.LookUpTableReader {
# JSONParser jsonParser
+ boolean[][] getLookUpTable(int)
}
class it.polimi.ingsw.View.CLI.Elements.Views.CommonGoalView {
- CommonGoalReader reader
- {static} CommonGoalView instance
+ {static} CommonGoalView getInstance()
+ ArrayList<String> getPrint(ArrayList<String>)
- ArrayList<String> drawCommonGoals()
+ ArrayList<String> addDescription(ArrayList<String>)
- ArrayList<String> applyMargin(int,String)
}
class it.polimi.ingsw.Controller.Server.Executor.ChatExecutor {
+ {static} void execute(MessageToServer)
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.GameObserver {
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.ShelfObserver {
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.EchoObserver {
+ void update()
}
class it.polimi.ingsw.Controller.Server.Executor.HandshakeExecutor {
+ {static} void execute(HandshakeMTS)
}
class it.polimi.ingsw.model.EndOfTurn.ScoreCalculation.AdjacencyScoreCalculation {
+ {static} int calculateScore(Player)
- {static} List<Integer> findClusters(ItemTile[][])
- {static} List<Integer> dfs(ItemTile[][],int,int,Color,Set<String>)
}
class it.polimi.ingsw.JSONReader.PersonalGoalReader {
- JSONParser jsonParser
+ HashMap<Color,Point> getPersonalGoalsData(String)
+ Stack<Integer> getPointStack()
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.CardImagesManager {
- {static} URL COMMON_GOAL_PACKAGE
- {static} URL PERSONAL_GOAL_PACKAGE
- {static} HashMap<String,Image> commonGoals
- {static} HashMap<String,Image> personalGoals
+ {static} Image getCommonGoalImage(String)
+ {static} Image getPersonalGoalImage(String)
+ void resetCommonGoals()
+ void resetPersonalGoals()
}
interface it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver {
~ void update()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommonGoalCE {
+ void execute()
}
class it.polimi.ingsw.model.EndOfTurn.BoardRefresher.BoardRefresher {
- Board board
- Bag BAG
- Game GAME
- boolean[][] lookUpTable
+ void refillBoard()
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.CommonGoalCard {
- ArrayList<VirtualViewObserver> observers
# Stack<Integer> pointsStack
- CommonGoalStrategy commonGoalStrategy
- HashSet<Player> playersWhoCompleted
- void initStackPoints()
+ int calculateScore(Player)
+ boolean hasCompleted(Player)
- boolean isGoalAchieved(Shelf)
+ int popPoints()
+ int peekPoints()
+ String getCardName()
+ void registerObserver(VirtualViewObserver)
+ void removeObserver(VirtualViewObserver)
+ void notifyObservers()
}
class it.polimi.ingsw.model.EndOfTurn.TurnHandler {
+ Game game
- List<EndOfTurnObserver> observers
- List<Player> players
- boolean lastTurn
+ void changeTurn()
+ boolean isLastTurn()
+ void startLastTurn()
+ void attachEndOfTurn(EndOfTurnObserver)
+ void notifyObservers()
}
class it.polimi.ingsw.View.CLI.Elements.GameStopper {
- {static} GameStopper instance
+ {static} GameStopper getIntance()
+ void update()
- void printWinnerScreen()
- void printLoserScreen()
- void printScoreBoard()
}
class it.polimi.ingsw.VirtualView.ModelObservers.GameVV {
- Game GAME
- VirtualView VIRTUAL_VIEW
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FourRowsOfFiveCGS {
+ boolean isGoalAchieved(Shelf)
- boolean hasLessThanFiveTiles(ItemTile[])
}
interface it.polimi.ingsw.VirtualModel.VirtualModelObserver {
~ void update()
}
class it.polimi.ingsw.model.player.Shelf {
- ArrayList<VirtualViewObserver> observers
- int COLUMNS
- int ROWS
- ItemTile[][] shelfGrid
+ ItemTile getTileAtLocation(Point)
+ void setTileAtLocation(Point,ItemTile)
+ void setShelfGrid(ItemTile[][])
+ ItemTile[][] getShelfGrid()
+ int getNumOfBoxLeftInCol(int)
+ boolean isColumnFull(int)
+ int getCOLUMNS()
+ int getROWS()
+ boolean insertTile(ItemTile,int)
+ boolean isFull()
+ void registerObserver(VirtualViewObserver)
+ void removeObserver(VirtualViewObserver)
+ void notifyObservers()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.SixGroupsOfTwoCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.View.CLI.InputStates.reader.Reader {
~ String input
~ boolean isReading
- {static} Reader instance
+ {static} Reader getInstance()
+ void run()
+ boolean isReading()
+ void setReading(boolean)
- void chooseCommand()
+ {static} String getInput()
+ void update()
}
class it.polimi.ingsw.VirtualView.ModelObservers.PlayerVV {
- Player PLAYER
- VirtualView VIRTUAL_VIEW
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.PlayerObserver {
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.ChangeTurnObserver {
- String previousPlayer
+ void update()
}
class it.polimi.ingsw.Controller.Server.Executor.PongExecutor {
+ {static} void execute(PongMTS)
}
abstract class it.polimi.ingsw.network.server.ClientHandler {
+ {abstract}void disconnect()
+ {abstract}void sendCommand(MessageToClient)
}
class it.polimi.ingsw.VirtualModel.BoardRepresentation {
- ItemTile[][] board
- {static} BoardRepresentation instance
+ {static} BoardRepresentation getInstance()
+ void setBoard(BoardMTC)
+ void setBoard(ItemTile[][])
+ ItemTile[][] getBoard()
+ Color[][] getBoardColors()
}
interface it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor {
~ void execute()
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.ItemTileMemory {
- {static} Map<Integer,ItemTile> ID_TO_ITEM_TILE
- {static} Map<Integer,Point> ID_TO_POSITION
- {static} Map<Integer,Image> TILE_TO_IMAGE
+ {static} void put(int,ItemTile)
+ {static} void put(int,Point)
+ {static} void put(int,Image)
+ {static} void put(int,ItemTile,Point)
+ {static} void put(int,ItemTile,Point,Image)
+ {static} Point getPoint(int)
+ {static} ItemTile getTile(int)
+ {static} Image getImage(int)
+ {static} boolean contains(int)
}
class it.polimi.ingsw.VirtualModel.EchosRepresentation {
- Stack<EchoMTC> messages
- {static} EchosRepresentation instance
+ {static} EchosRepresentation getInstance()
+ void putMessage(EchoMTC)
+ EchoMTC popMessage()
+ EchoMTC peekMessage()
+ void clean()
}
class it.polimi.ingsw.VirtualModel.CommonGoalsRepresentation {
- {static} CommonGoalsRepresentation instance
- CommonGoalMTC commonGoalMessage
+ {static} CommonGoalsRepresentation getInstance()
+ void updateCommonGoal(CommonGoalMTC)
+ ArrayList<String> getCardNames()
+ CommonGoalMTC getCommonGoalMessage()
+ ArrayList<Integer> getAvailablePoints()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.TilesTableObserver {
+ void update()
}
class it.polimi.ingsw.View.CLI.Elements.Printer {
~ {static} HashMap<Color,String> colorMap
- {static} Printer instance
- Reader reader
+ {static} Printer getInstance()
+ {static} void enableCLIColors(boolean)
+ {static} HashMap<Color,String> getColorMap()
+ void update()
+ {static} void clearConsole()
+ {static} ArrayList<String> addAvailableCommands(ArrayList<String>)
- {static} ArrayList<String> getAvailableCommands()
}
class it.polimi.ingsw.View.CLI.Elements.Views.ShelfView {
- {static} ShelfView instance
+ {static} ShelfView getInstance()
+ ArrayList<String> getPrint(ArrayList<String>)
+ ArrayList<String> getOtherShelvesPrint(String)
- ArrayList<String> printShelf(ArrayList<String>,String)
}
class it.polimi.ingsw.View.CLI.InputStates.StartOrJoinState {
- boolean triedToCreateAGame
- boolean hasJoined
+ void play()
- void joinGame()
- void createNewGame()
+ void update()
}
class it.polimi.ingsw.model.tiles.Bag {
- int NUMBER_OF_COLORS
- int TILES_PER_COLOR
- int tilesLeft
- HashMap<Color,Integer> colorNumber
+ ItemTile drawTile()
~ Color randomColor()
}
class it.polimi.ingsw.Controller.Client.ByeMTS {
+ void update()
}
class it.polimi.ingsw.View.GUI.Gui {
+ void start(Stage)
+ {static} void main(String[])
}
class it.polimi.ingsw.VirtualView.Messages.ChosenTilesTableMTC {
- List<ItemTile> CHOSEN_TILES
+ List<ItemTile> getChosenTiles()
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.ObjectiveCardController {
~ ImageView commonGoalCard1
~ ImageView commonGoalCard2
~ ImageView personalGoalImage
~ Text card1Description
~ Text card2Description
~ Text pointCG1Text
~ Text pointCG2Text
- void initCommonGoals()
- void initPersonalGoals()
+ void updateCommonGoals()
+ void setPointCG1Text(int)
+ void setPointCG2Text(int)
+ void setCard1Description(String)
+ void setCard2Description(String)
+ void onGoBackClicked()
+ void initialize(URL,ResourceBundle)
}
class it.polimi.ingsw.VirtualView.VirtualView {
- List<SocketClientHandler> clientHandlers
- Game GAME
+ void addClient(SocketClientHandler)
+ SocketClientHandler getSocketHandlerClientByNickname(String)
+ void send(MessageToClient)
+ void updateAllPlayers()
+ void updateAllShelvs()
}
class it.polimi.ingsw.VirtualView.ModelObservers.CommonGoalVV {
- Game game
- VirtualView VIRTUAL_VIEW
+ void update()
}
class it.polimi.ingsw.View.CLI.InputStates.NicknameState {
+ void play()
+ void update()
}
enum it.polimi.ingsw.Enum.GameState {
+  PREGAME
+  PICK_UP_TILES
+  INSERT_TILES
+  END
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.BoardMemory {
- {static} ImageView[][] imagesInBoard
+ {static} void put(ImageView,int,int)
+ {static} ImageView get(int,int)
+ {static} void removeImage(int,int)
}
class it.polimi.ingsw.Controller.Client.CanIPlayMTS {
- int newGameID
+ void update()
+ int getNewGameID()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.CommandExecutorFactory {
+ {static} CommandExecutor getCommand(String)
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.ItemRefillUtility {
- {static} String ITEM_TILES_PACKAGE
+ {static} Image createImage(ItemTile)
+ {static} Node getNodeFromGridPane(GridPane,int,int)
+ {static} void updateBoardGrid(ItemTile[][])
+ {static} void updateShelfGrid(GridPane,ItemTile[][])
+ {static} void updateOtherShelfGrid(ItemTile[][])
}
abstract class it.polimi.ingsw.VirtualModel.VirtualModelSubject {
# List<VirtualModelObserver> observers
+ void registerObserver(VirtualModelObserver)
+ void removeObserver(VirtualModelObserver)
+ void notifyObservers()
}
class it.polimi.ingsw.View.GUI.SceneController.PlayerNumSceneController {
~ ToggleGroup playerNumToggle
~ RadioButton twoPlayers
~ RadioButton threePlayers
~ RadioButton fourPlayers
- boolean continueClicked
+ void updateEcho(EchoMTC)
# void onContinueButtonClick()
# void onBackToMenuButtonClick()
+ int getPlayerNum()
+ void initialize(URL,ResourceBundle)
}
class it.polimi.ingsw.model.player.Player {
- ArrayList<VirtualViewObserver> observers
- Shelf shelf
- PersonalGoal personalGoal
- String nickname
- boolean isConnected
- int score
+ int getScore()
+ Shelf getShelf()
+ PersonalGoal getPersonalGoal()
+ void setPersonalGoal(PersonalGoal)
+ String getNickname()
+ void updateScore(int)
+ void setConnected(boolean)
+ boolean isConnected()
+ void registerObserver(VirtualViewObserver)
+ void removeObserver(VirtualViewObserver)
+ void notifyObservers()
}
class it.polimi.ingsw.VirtualView.ModelObservers.ChosenTilesTableVV {
- Game GAME
- VirtualView VIRTUAL_VIEW
+ void update()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.CommonGoalsObserver {
+ void update()
}
class it.polimi.ingsw.VirtualModel.ShelvesRepresentation {
- Map<String,ShelfMTC> SHELF_MESSAGES
- {static} ShelvesRepresentation instance
+ {static} ShelvesRepresentation getInstance()
+ void updateShelf(ShelfMTC)
+ ShelfMTC getShelfMessage(String)
}
class it.polimi.ingsw.model.EndOfTurn.BoardRefresher.RefreshTrigger {
+ {static} boolean isBoardRefreshable(Board)
- {static} boolean isNotNull(ItemTile)
}
class it.polimi.ingsw.View.GUI.SceneController.WinSceneController {
~ Text player1Nickname
~ Text player1Points
~ ImageView player1CrownImage
- void setWinner()
+ void updatePlayers()
+ void initialize(URL,ResourceBundle)
}
abstract class it.polimi.ingsw.View.CLI.Elements.Views.ViewElement {
~ String NULL
~ {abstract}ArrayList<String> getPrint(ArrayList<String>)
}
class it.polimi.ingsw.View.CLI.Elements.Views.ChatView {
- int chatWidth
- int chatHeigth
- {static} ChatView instance
+ {static} ChatView getInstance()
+ ArrayList<String> getPrint(ArrayList<String>)
- ArrayList<String> getChatPrint()
- String padding(ChatMTC)
}
class it.polimi.ingsw.InputValidator {
+ {static} boolean isValidIpAddress(String)
+ {static} boolean isValidPort(String)
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.ChatMemory {
- {static} TextField[][] messageInChat
+ {static} TextField getMessage(int,int)
+ {static} void setMessage(TextField,int,int)
+ {static} void setMessage(String,int,int)
+ {static} void clear()
}
class it.polimi.ingsw.Controller.Server.GamesManager {
- HashMap<Integer,Game> gamesData
- Set<String> PLAYERS_NAME
- {static} GamesManager gamesManagerInstance
+ {static} GamesManager getInstance()
+ void putGame(int,Game)
+ Game getGame(int)
+ boolean addNickname(String)
+ void onCommandReceived(MessageToServer)
+ int createID()
+ void removePlayer(SocketClientHandler)
+ void endGame(int)
+ void onConnectionLost(SocketClientHandler)
+ void onConnectionRestored(SocketClientHandler)
}
enum it.polimi.ingsw.Enum.EchoID {
+  PANIC
+  NOID
+  GAMEFULL
+  BADNICK
+  BADCOLUMN
+  NICKOK
+  JOINED
+  CREATED
+  GAMESTARTED
+  WRONG_CHOSEN_TABLE_INDEX
+  WRONGSTATE
+  NOTACTIVE
+  BADPICKUP
+  COLUMNDIFF
+  NOPLAYER
+  LAST_TURN
}
abstract class it.polimi.ingsw.network.client.Client {
# String nickname
# int gameId
+ {static} Logger LOGGER
+ {abstract}void sendCommand(MessageToServer)
+ {abstract}void readCommand()
+ {abstract}void disconnect()
+ String getNickname()
+ void setNickname(String)
+ int getGameId()
+ void setGameId(int)
}
class it.polimi.ingsw.VirtualView.Messages.ShelfMTC {
- ItemTile[][] SHELF
- String OWNER
+ String getOwner()
+ ItemTile[][] getShelf()
+ Color[][] getShelfForCLI()
+ void update()
}
class it.polimi.ingsw.Controller.Server.PingPong.PingRoutine {
- SocketClientHandler SOCKET_CLIENT_HANDLER
- PingController pingController
+ void run()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.ThreeMaxThreeDiffCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.Controller.Client.PongMTS {
+ void update()
}
interface it.polimi.ingsw.JSONReader.JSONFileReader {
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.ChatCE {
+ void execute()
}
interface it.polimi.ingsw.model.EndOfTurn.EndOfTurnObserver {
~ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.CommonCardDealer {
+ {static} List<CommonGoalStrategy> possibleCommonGoals
+ {static} List<CommonGoalStrategy> pickCardStrategies(int)
+ {static} List<CommonGoalCard> pickCommonGoalCards(int)
- {static} void initCommonGoals()
}
class it.polimi.ingsw.View.GUI.SceneController.DisconnectionErrorSceneController {
# void onExitButtonClick()
# void onLobbyButtonClick()
}
class it.polimi.ingsw.VirtualView.Messages.BoardMTC {
- ItemTile[][] BOARD
+ ItemTile[][] getColorBoard()
+ void update()
}
class it.polimi.ingsw.Controller.Server.Executor.InsertTilesExecutor {
+ {static} void execute(InsertTileMTS)
}
class it.polimi.ingsw.model.board.ChosenTilesTable.ChosenTilesTable {
- List<VirtualViewObserver> observers
- List<ItemTile> chosenTiles
- Board board
- Integer chosenColumn
+ void addTiles(ArrayList<ItemTile>)
+ ItemTile popTile(int)
+ ItemTile getTile(int)
+ int size()
+ Integer getChosenColumn()
+ void setChosenColumn(Integer)
+ List<ItemTile> getChosenTiles()
+ void registerObserver(VirtualViewObserver)
+ void removeObserver(VirtualViewObserver)
+ void notifyObservers()
}
abstract class it.polimi.ingsw.View.CLI.InputStates.InputState {
~ String input
~ Client socketClient
+ {abstract}void play()
}
class it.polimi.ingsw.JSONReader.CommonGoalReader {
# JSONParser jsonParser
+ ArrayList<String> getDrawing(String)
- JSONObject getCardObject(String)
+ String getDescription(String)
}
class it.polimi.ingsw.InputReader {
- {static} ExecutorService executorService
- BufferedReader br
+ String call()
+ {static} Map<String,String> askServerInfo()
+ {static} String askNickname()
+ {static} String readLine()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.BoardObserver {
+ void update()
}
class it.polimi.ingsw.ServerApp {
+ {static} void main(String[])
}
class it.polimi.ingsw.Controller.Client.ChatMTS {
- String chatMessage
- String sender
- String receiver
+ String getReceiver()
+ void update()
+ String getSender()
+ String getChatMessage()
}
class it.polimi.ingsw.View.CLI.InputStates.ActivePlayerState {
- Reader reader
+ void play()
+ void update()
}
class it.polimi.ingsw.View.CLI.InputStates.WaitingPlayerState {
- Reader reader
+ void play()
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.TwoSquaresCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.VirtualView.Messages.CommonGoalMTC {
- ArrayList<String> cardNames
- ArrayList<Integer> availablePoints
+ ArrayList<String> getCardNames()
+ ArrayList<Integer> getAvailablePoints()
+ void update()
}
class it.polimi.ingsw.VirtualModel.TilesTableRepresentation {
- {static} TilesTableRepresentation instance
- ChosenTilesTableMTC tilesTableMessage
+ {static} TilesTableRepresentation getInstance()
+ void updateTable(ChosenTilesTableMTC)
+ List<ItemTile> getTiles()
}
class it.polimi.ingsw.View.CLI.Elements.Views.TilesTableView {
- {static} TilesTableView instance
+ {static} TilesTableView getInstance()
+ ArrayList<String> getPrint(ArrayList<String>)
}
class it.polimi.ingsw.Controller.Client.PickUpTilesMTS {
- int gameID
- String nickname
- ArrayList<Point> tilesPosition
+ void update()
+ ArrayList<Point> getTilesPosition()
}
class it.polimi.ingsw.VirtualView.ModelObservers.ShelfVV {
- VirtualView VIRTUAL_VIEW
- Player OWNER
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.EightTilesSameColorCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.ShelfMemory {
- {static} ImageView[][] imagesInMyShelf
- {static} ImageView[][] imagesInOtherShelf
+ {static} void put(ImageView,int,int,int)
+ {static} ImageView get(int,int,int)
+ {static} void setImage(Image,int,int,int)
+ {static} void reset(int)
}
class it.polimi.ingsw.VirtualView.Messages.GameMTC {
- int GAMEID
- int MAX_PLAYER_NUMBER
- String activePlayerNickname
- GameState GAME_STATE
- int numOfPlayers
+ int getGameID()
+ int getMAX_PLAYER_NUMBER()
+ GameState getGameState()
+ String getActivePlayerNickname()
+ int getNumOfPlayers()
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FourAnglesCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FourGroupsOfFourCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.XShapedCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.RefreshCE {
+ void execute()
}
class it.polimi.ingsw.model.cards.personalGoals.PersonalCardDealer {
- {static} File personalCardsDirectory
+ {static} void getCards(ArrayList<Player>)
}
class it.polimi.ingsw.View.GUI.SceneController.Utility.ConnectionPendingTimer {
- {static} Timer connectionPendingTimer
- {static} boolean connectionPending
+ {static} void start(int)
+ {static} void cancel()
+ {static} boolean isPending()
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.GameStateObserver {
+ GameState previousState
+ void update()
}
class it.polimi.ingsw.model.Game {
- ArrayList<VirtualViewObserver> observers
- int BOARD_DIMENSION
- int MAX_PLAYER_NUMBER
- VirtualView virtualView
- int gameID
- Bag bag
- Board board
- ChosenTilesTable chosenTilesTable
- GameState gameState
- ArrayList<CommonGoalCard> commonGoals
- ArrayList<Player> players
- Player activePlayer
- TurnHandler turnHandler
+ ArrayList<CommonGoalCard> getCommonGoals()
+ void start()
+ void setVirtualView(VirtualView)
- void turnHandlerInitializer()
+ void end()
+ Board getBoard()
+ ArrayList<Player> getPlayers()
+ Player getActivePlayer()
+ void setActivePlayer(Player)
+ Bag getBag()
+ void setBoard(Board)
+ int getMAX_TILES_FROM_BOARD()
+ ChosenTilesTable getChosenTilesTable()
+ void addPlayer(Player)
+ TurnHandler getTurnHandler()
+ Player getWinner()
+ int getMAX_PLAYER_NUMBER()
+ void setGameID(int)
+ int getGameID()
+ void setGameState(GameState)
+ Player getPlayer(String)
+ void disconnectPlayer(String)
+ GameState getGameState()
+ VirtualView getVirtualView()
+ void registerObserver(VirtualViewObserver)
+ void removeObserver(VirtualViewObserver)
+ void notifyObservers()
}
interface it.polimi.ingsw.model.EndOfTurn.EndOfTurnSubject {
~ void attachEndOfTurn(EndOfTurnObserver)
~ void notifyObservers()
}
class it.polimi.ingsw.View.GUI.NodeData {
- String url
- Color color
- ImageView imageView
- Point position
+ Color getColor()
+ void setColor(Color)
+ String getUrl()
+ void setUrl(String)
+ ImageView getImageView()
+ void setImageView(ImageView)
+ Point getPosition()
+ void setPosition(Point)
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.FirstPlayerToFinishObserver {
+ void update()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.DisconnectCE {
+ void execute()
}
interface it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject {
~ void registerObserver(VirtualViewObserver)
~ void removeObserver(VirtualViewObserver)
~ void notifyObservers()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.PChatCE {
+ void execute()
}
class it.polimi.ingsw.Controller.Client.NewGameMTS {
- int NUMBER_OF_PLAYERS
+ void update()
+ int getNumberOfPlayers()
}
class it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.PersonalGoalCE {
+ void execute()
}
class it.polimi.ingsw.model.board.Board {
- ArrayList<VirtualViewObserver> OBSERVERS
- ItemTile[][] BOARD_GRID
+ ItemTile[][] getBoardGrid()
+ int getSize()
+ void setItemTile(Color,int,int)
+ ItemTile removeItemTile(Point)
+ ArrayList<ItemTile> removeItemTiles(ArrayList<Point>)
+ void emptyBoard()
+ void registerObserver(VirtualViewObserver)
+ void removeObserver(VirtualViewObserver)
+ void notifyObservers()
}
class it.polimi.ingsw.network.server.SocketClientHandler {
- Socket client
- PingController pingController
- String nickname
- int gameID
- ObjectOutputStream outputStm
- ObjectInputStream input
- boolean stop
+ void run()
- void handleClientMessages()
+ void disconnect()
+ void sendCommand(MessageToClient)
+ String getNickname()
+ void setNickname(String)
+ PingController getPingController()
+ int getGameID()
+ void setGameID(int)
}
class it.polimi.ingsw.Controller.Server.Executor.CanIPlayExecutor {
+ {static} void execute(CanIPlayMTS)
}
class it.polimi.ingsw.View.GUI.SceneController.EnterGameSceneController {
~ ImageView wrongGameIdImage
~ RadioButton newGameRB
~ RadioButton joinGameRB
~ Text gameIdText
~ TextField gameIdField
~ Button continueButton
~ Text errorText
~ AnchorPane errorPane
- boolean connectPlayer
+ void updateEcho(EchoMTC)
# void onContinueButtonClick()
+ void connectPlayer()
+ void enterGame()
+ void connectionFailed()
+ void wrongGameIdEffect(boolean)
+ void onJoinGameRBClicked()
+ void onNewGameRBClicked()
+ void setContinueButtonVisible()
+ void onGameIdInsert()
}
class it.polimi.ingsw.VirtualModel.ChatRepresentation {
- ArrayList<ChatMTC> CHAT
- {static} ChatRepresentation instance
+ {static} ChatRepresentation getInstance()
+ ArrayList<ChatMTC> getMessages()
+ void addMessage(ChatMTC)
}
class it.polimi.ingsw.model.player.ShelfUtils {
+ {static} boolean checkMatrixWithDFS(ItemTile[][],int,int)
- {static} int dfs(ItemTile[][],boolean[][],int,int,Color)
}
class it.polimi.ingsw.Controller.Server.Executor.NewGameExecutor {
+ {static} void execute(NewGameMTS)
}
class it.polimi.ingsw.View.GUI.SceneController.LoginSceneController {
~ TextField nicknameField
~ TextField ipField
~ ImageView continueButton
~ Label continueText
~ ImageView wrongNicknameImage
~ Text wrongNicknameText
~ AnchorPane nicknameErrorPane
~ AnchorPane ipErrorPane
~ ImageView wrongIpImage
~ Text wrongIpText
~ StackPane login_scene
+ void updateEcho(EchoMTC)
# void onGoBackButtonClick()
# void onContinueButtonClick()
+ void setContinueButtonVisible()
+ void onKeyPressed(KeyEvent)
- void showCouldNotConnectMessage()
- void badNicknameEffect(EchoMTC)
- void goToCreateGame()
+ void initialize(URL,ResourceBundle)
}
class it.polimi.ingsw.View.GUI.SceneController.StageController {
- {static} Stage currentStage
- {static} GuiController controller
+ {static} void setUpStage(Stage,String)
+ {static} GuiController getController()
+ {static} void changeScene(String,String)
}
class it.polimi.ingsw.VirtualModel.PlayersRepresentation {
- Map<String,PlayerMTC> PLAYER_MESSAGES
- {static} PlayersRepresentation instance
+ {static} PlayersRepresentation getInstance()
+ ArrayList<String> getPlayersList()
+ int getPlayerScore(String)
+ PlayerMTC getPlayerInfoByNickname(String)
+ ArrayList<PlayerMTC> getAllPlayerMTC()
+ void updatePlayer(PlayerMTC)
}
class it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.ChatObserver {
+ void update()
}
class it.polimi.ingsw.Controller.Server.Executor.ByeExecutor {
+ {static} void execute(MessageToServer)
}
class it.polimi.ingsw.View.CLI.Elements.Views.PersonalGoalView {
- {static} PersonalGoalView instance
+ {static} PersonalGoalView getInstance()
+ ArrayList<String> getPrint(ArrayList<String>)
- ArrayList<String> drawShelf()
+ ArrayList<String> addDescription(ArrayList<String>)
}
class it.polimi.ingsw.network.server.ServerSocketAccepter {
- int port
~ ServerSocket serverSocket
+ void run()
}
class it.polimi.ingsw.Controller.Client.HandshakeMTS {
- String newNickname
+ void update()
+ String getNewNickname()
}
class it.polimi.ingsw.model.EndOfTurn.ScoreCalculation.ScoreBoard {
- Game game
- boolean isFirstPointAssigned
- ArrayList<CommonGoalCard> commonGoals
- void scoreCommonGoalCards(Player)
+ void update()
- Player getPreviousActivePlayer()
+ void endGameScoreUpdate()
- void scoreFirstCompletedShelf(Player)
- void scorePersonalGoals()
- void scoreAdjacency()
}
class it.polimi.ingsw.Controller.Client.InsertTileMTS {
- int TILE_POSITION
- int COL
+ void update()
+ int getCol()
+ int getTilePosition()
}
class it.polimi.ingsw.VirtualView.Messages.PingMTC {
+ void update()
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.TwoRowsWithFiveDiffCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.TwoColSixDiffCGS {
+ boolean isGoalAchieved(Shelf)
}
class it.polimi.ingsw.Controller.Server.PingPong.PingController {
- Timer TIMER
- int PING_TIMEOUT
- int DELAY
- boolean connectionLost
- int MAX_PING_FAILURES
- int pingToDisconnect
- SocketClientHandler SOCKET_HANDLER
+ void run()
+ void onPongReceived()
+ int decrementPingToDisconnect()
+ SocketClientHandler getSocketHandler()
+ void clientConnectionLost()
+ void close()
}
interface it.polimi.ingsw.VirtualView.Messages.MessageToClient {
~ void update()
}
class it.polimi.ingsw.View.CLI.Elements.DisconnectionHandler {
- {static} DisconnectionHandler instance
+ {static} DisconnectionHandler getInstance()
+ void update()
- void handleDisconnection()
}
class it.polimi.ingsw.model.board.ChosenTilesTable.PickUpValidator {
+ {static} boolean isValid(Game,ArrayList<Point>)
- {static} boolean onSameLine(ArrayList<Point>)
- {static} boolean adjacent(ArrayList<Point>)
- {static} boolean hasFreeAdjacentNeighbor(ItemTile[][],Point)
- {static} boolean tooManyTilesChosen(Game,int)
}
class it.polimi.ingsw.View.GUI.SceneController.ChatController {
~ TextField newMessageField
~ SplitMenuButton receiverMenu
~ MenuItem player2MenuItem
~ MenuItem player3MenuItem
~ MenuItem player4MenuItem
~ MenuItem broadcastMenuItem
~ GridPane chat
~ StackPane chat_scene
~ {static} String receiverNickname
- boolean enterKeyBusy
+ void initChat()
+ void updateChat()
+ void onBackToBoardClicked()
+ void onSendButtonClicked()
+ void onKeyPressed(KeyEvent)
+ void onBroadcastClicked()
+ void onPlayer2Clicked()
+ void onPlayer3Clicked()
+ void onPlayer4Clicked()
- void initNickname()
+ void initialize(URL,ResourceBundle)
}
class it.polimi.ingsw.View.CLI.InputStates.GameStartupState {
+ void play()
+ void update()
}
abstract class it.polimi.ingsw.View.GUI.SceneController.GuiController {
+ void updateGame()
+ void updatePlayers()
+ void updateEcho(EchoMTC)
+ void updateBoard()
+ void updateShelf()
+ void updateChosenTilesTable()
+ void updateChat()
+ void updateCommonGoals()
+ void updateChangeTurn()
+ void updateFirstPlayerToFinish()
+ void updateGameState()
}
class it.polimi.ingsw.VirtualModel.GameRepresentation {
- GameMTC gameMessage
- {static} GameRepresentation instance
+ {static} GameRepresentation getInstance()
+ void setGame(GameMTC)
+ int getMAX_PLAYER_NUMBER()
+ int getGameID()
+ GameState getGameState()
+ String getActivePlayerNickname()
+ GameMTC getGameMessage()
}


it.polimi.ingsw.View.CLI.Elements.Views.ViewElement <|-- it.polimi.ingsw.View.CLI.Elements.Views.BoardView
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.InsertTilesCE
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.ScaleCGS
it.polimi.ingsw.network.client.Client <|-- it.polimi.ingsw.network.client.SocketClient
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.PickupTilesCE
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.ShelvesCE
java.io.Serializable <|.. it.polimi.ingsw.model.tiles.ItemTile
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.BoardVV
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.OtherShelvesController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.OtherShelvesController
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.EchoMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.EchoMTC
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.LobbyController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.LobbyController
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.ColorsCE
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.InvalidCE
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.ChatMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.ChatMTC
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.PickupTilesExecutor
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.PlayerMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.PlayerMTC
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FiveTilesDiagonalCGS
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.BoardController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.BoardController
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.WaitingRoomController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.WaitingRoomController
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.WaitingForPlayersState
it.polimi.ingsw.View.CLI.InputStates.InputState <|-- it.polimi.ingsw.View.CLI.InputStates.WaitingForPlayersState
it.polimi.ingsw.JSONReader.JSONFileReader <|.. it.polimi.ingsw.JSONReader.LookUpTableReader
it.polimi.ingsw.View.CLI.Elements.Views.ViewElement <|-- it.polimi.ingsw.View.CLI.Elements.Views.CommonGoalView
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.ChatExecutor
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.GameObserver
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.ShelfObserver
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.EchoObserver
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.HandshakeExecutor
it.polimi.ingsw.JSONReader.JSONFileReader <|.. it.polimi.ingsw.JSONReader.PersonalGoalReader
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommonGoalCE
it.polimi.ingsw.model.EndOfTurn.EndOfTurnObserver <|.. it.polimi.ingsw.model.EndOfTurn.BoardRefresher.BoardRefresher
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject <|.. it.polimi.ingsw.model.cards.commonGoals.CommonGoalCard
it.polimi.ingsw.model.EndOfTurn.EndOfTurnSubject <|.. it.polimi.ingsw.model.EndOfTurn.TurnHandler
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.Elements.GameStopper
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.GameVV
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FourRowsOfFiveCGS
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject <|.. it.polimi.ingsw.model.player.Shelf
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.SixGroupsOfTwoCGS
it.polimi.ingsw.View.CLI.InputStates.reader.Runnable <|.. it.polimi.ingsw.View.CLI.InputStates.reader.Reader
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.reader.Reader
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.PlayerVV
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.ModelObservers.PlayerVV
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.ModelObservers.PlayerVV
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.PlayerObserver
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.ChangeTurnObserver
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.PongExecutor
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.BoardRepresentation
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.EchosRepresentation
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.CommonGoalsRepresentation
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.TilesTableObserver
it.polimi.ingsw.View.CLI.Elements.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.Elements.Printer
it.polimi.ingsw.View.CLI.Elements.Views.ViewElement <|-- it.polimi.ingsw.View.CLI.Elements.Views.ShelfView
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.StartOrJoinState
it.polimi.ingsw.View.CLI.InputStates.InputState <|-- it.polimi.ingsw.View.CLI.InputStates.StartOrJoinState
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.ByeMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.ByeMTS
javafx.application.Application <|-- it.polimi.ingsw.View.GUI.Gui
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.ChosenTilesTableMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.ChosenTilesTableMTC
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.ObjectiveCardController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.ObjectiveCardController
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.CommonGoalVV
it.polimi.ingsw.model.EndOfTurn.EndOfTurnObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.CommonGoalVV
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.NicknameState
it.polimi.ingsw.View.CLI.InputStates.InputState <|-- it.polimi.ingsw.View.CLI.InputStates.NicknameState
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.CanIPlayMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.CanIPlayMTS
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.PlayerNumSceneController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.PlayerNumSceneController
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject <|.. it.polimi.ingsw.model.player.Player
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.ChosenTilesTableVV
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.CommonGoalsObserver
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.ShelvesRepresentation
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.WinSceneController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.WinSceneController
it.polimi.ingsw.View.CLI.Elements.Views.ViewElement <|-- it.polimi.ingsw.View.CLI.Elements.Views.ChatView
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.ShelfMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.ShelfMTC
it.polimi.ingsw.Controller.Server.PingPong.Runnable <|.. it.polimi.ingsw.Controller.Server.PingPong.PingRoutine
java.util.TimerTask <|-- it.polimi.ingsw.Controller.Server.PingPong.PingRoutine
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.ThreeMaxThreeDiffCGS
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.PongMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.PongMTS
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.ChatCE
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.BoardMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.BoardMTC
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.InsertTilesExecutor
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject <|.. it.polimi.ingsw.model.board.ChosenTilesTable.ChosenTilesTable
it.polimi.ingsw.JSONReader.JSONFileReader <|.. it.polimi.ingsw.JSONReader.CommonGoalReader
it.polimi.ingsw.Callable <|.. it.polimi.ingsw.InputReader
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.BoardObserver
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.ChatMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.ChatMTS
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.ActivePlayerState
it.polimi.ingsw.View.CLI.InputStates.InputState <|-- it.polimi.ingsw.View.CLI.InputStates.ActivePlayerState
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.WaitingPlayerState
it.polimi.ingsw.View.CLI.InputStates.InputState <|-- it.polimi.ingsw.View.CLI.InputStates.WaitingPlayerState
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.TwoSquaresCGS
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.CommonGoalMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.CommonGoalMTC
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.TilesTableRepresentation
it.polimi.ingsw.View.CLI.Elements.Views.ViewElement <|-- it.polimi.ingsw.View.CLI.Elements.Views.TilesTableView
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.PickUpTilesMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.PickUpTilesMTS
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewObserver <|.. it.polimi.ingsw.VirtualView.ModelObservers.ShelfVV
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.ModelObservers.ShelfVV
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.ModelObservers.ShelfVV
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.EightTilesSameColorCGS
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.GameMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.GameMTC
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FourAnglesCGS
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.FourGroupsOfFourCGS
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.XShapedCGS
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.RefreshCE
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.GameStateObserver
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject <|.. it.polimi.ingsw.model.Game
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.FirstPlayerToFinishObserver
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.DisconnectCE
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.PChatCE
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.NewGameMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.NewGameMTS
it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.CommandExecutor <|.. it.polimi.ingsw.View.CLI.InputStates.reader.commandExecutors.PersonalGoalCE
it.polimi.ingsw.VirtualView.ModelObservers.VirtualViewSubject <|.. it.polimi.ingsw.model.board.Board
it.polimi.ingsw.network.server.Runnable <|.. it.polimi.ingsw.network.server.SocketClientHandler
it.polimi.ingsw.network.server.ClientHandler <|-- it.polimi.ingsw.network.server.SocketClientHandler
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.CanIPlayExecutor
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.EnterGameSceneController
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.ChatRepresentation
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.NewGameExecutor
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.LoginSceneController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.LoginSceneController
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.PlayersRepresentation
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.GUI.SceneController.VirtualModelObservers.ChatObserver
it.polimi.ingsw.Controller.Server.Executor.Executor <|.. it.polimi.ingsw.Controller.Server.Executor.ByeExecutor
it.polimi.ingsw.View.CLI.Elements.Views.ViewElement <|-- it.polimi.ingsw.View.CLI.Elements.Views.PersonalGoalView
it.polimi.ingsw.network.server.Runnable <|.. it.polimi.ingsw.network.server.ServerSocketAccepter
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.HandshakeMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.HandshakeMTS
it.polimi.ingsw.model.EndOfTurn.EndOfTurnObserver <|.. it.polimi.ingsw.model.EndOfTurn.ScoreCalculation.ScoreBoard
java.io.Serializable <|.. it.polimi.ingsw.Controller.Client.InsertTileMTS
it.polimi.ingsw.Controller.Client.MessageToServer <|-- it.polimi.ingsw.Controller.Client.InsertTileMTS
it.polimi.ingsw.VirtualView.Messages.MessageToClient <|.. it.polimi.ingsw.VirtualView.Messages.PingMTC
java.io.Serializable <|.. it.polimi.ingsw.VirtualView.Messages.PingMTC
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.TwoRowsWithFiveDiffCGS
it.polimi.ingsw.model.cards.commonGoals.CommonGoalStrategy <|-- it.polimi.ingsw.model.cards.commonGoals.commonGoalsStrategy.TwoColSixDiffCGS
it.polimi.ingsw.Controller.Server.PingPong.Thread <|-- it.polimi.ingsw.Controller.Server.PingPong.PingController
it.polimi.ingsw.VirtualModel.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.Elements.DisconnectionHandler
javafx.fxml.Initializable <|.. it.polimi.ingsw.View.GUI.SceneController.ChatController
it.polimi.ingsw.View.GUI.SceneController.GuiController <|-- it.polimi.ingsw.View.GUI.SceneController.ChatController
it.polimi.ingsw.View.CLI.InputStates.VirtualModelObserver <|.. it.polimi.ingsw.View.CLI.InputStates.GameStartupState
it.polimi.ingsw.View.CLI.InputStates.InputState <|-- it.polimi.ingsw.View.CLI.InputStates.GameStartupState
it.polimi.ingsw.VirtualModel.VirtualModelSubject <|-- it.polimi.ingsw.VirtualModel.GameRepresentation
@enduml